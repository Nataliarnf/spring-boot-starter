/*
 * Copyright Â© 2017 IBM Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

plugins {
    id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'

apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'

import org.apache.tools.ant.filters.*

archivesBaseName = 'spring-boot-starter'

description = 'Spring Boot Starter for the IBM Watson Services'

group = 'com.ibm.watson.developer_cloud'
version = new File(rootDir, 'VERSION').text.trim()

// If the version says "snapshot" anywhere assume it is not a release
ext.isReleaseVersion = !version.toUpperCase(Locale.ENGLISH).contains("SNAPSHOT")

javadoc {
    source = 'src/main/java'
}

checkstyle {
    configFile = rootProject.file('checkstyle.xml')
    ignoreFailures = false
}

checkstyleMain {
    ignoreFailures = false
}

checkstyleTest {
    ignoreFailures = false
}

task docs(type: Javadoc) {
    destinationDir = file("$buildDir/docs/all")
}

task copyJars(type: Copy) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "$buildDir/allJars"
}

task signJars(type: Copy) {
    from subprojects.collect { it.tasks.withType(Sign) }
    into "$buildDir/allJars"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

ext.watsonVersion = '4.2.1'
ext.springVersion = '4.3.12.RELEASE'
ext.springBootVersion = '1.5.9.RELEASE'

dependencies {
    // Watson Java SDK
    compile group: 'com.ibm.watson.developer_cloud', name: 'java-sdk', version: watsonVersion

    // Spring
    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-context', version: springVersion
    compile group: 'org.springframework', name: 'spring-beans', version: springVersion
    compile group: 'org.springframework.boot', name: 'spring-boot', version: springBootVersion
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: springBootVersion
    optional group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: springBootVersion

    // testing
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
}

compileJava.dependsOn(processResources)

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

afterEvaluate {
    if (plugins.hasPlugin(JavaPlugin)) {
        rootProject.tasks.docs {
            source += files(sourceSets.main.allJava)
            classpath += files(sourceSets*.compileClasspath)
        }
    }
}

apply plugin: 'jacoco'

task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all sub projects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant source sets from the sub projects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled true
        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
    testReport
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")

    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

release {
    tagTemplate = 'watson-spring-boot-$version'
}

